# Generated by Django 5.2 on 2025-06-02 14:32

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('standort', models.CharField(max_length=100, verbose_name='Standort')),
                ('laenge_ns', models.FloatField(verbose_name='Länge Nord/Süd (m)')),
                ('breite_ow', models.FloatField(verbose_name='Breite Ost/West (m)')),
                ('geschosshoehe', models.FloatField(verbose_name='Geschosshoehe (m)')),
                ('geschosse', models.IntegerField(verbose_name='Anzahl Geschosse')),
                ('fenster_nord', models.FloatField(default=0, verbose_name='Fenster Nord (%)')),
                ('fenster_sued', models.FloatField(default=0, verbose_name='Fenster Süd (%)')),
                ('fenster_ost', models.FloatField(default=0, verbose_name='Fenster Ost (%)')),
                ('fenster_west', models.FloatField(default=0, verbose_name='Fenster West (%)')),
                ('fenster_dach', models.FloatField(default=0, verbose_name='Fenster Dach (%)')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='DruckverlustLueftung',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bauteil', models.CharField(help_text="z. B. 'Zulufkanalsystem', 'Erhitzer', 'Kühler', 'WRG-Einheit Klasse H3' etc.", max_length=100)),
                ('druckverlust_niedrig', models.FloatField(help_text='Druckverlust (niedrig) in Pa')),
                ('druckverlust_normal', models.FloatField(help_text='Druckverlust (normal) in Pa')),
                ('druckverlust_hoch', models.FloatField(help_text='Druckverlust (hoch) in Pa')),
            ],
            options={
                'verbose_name': 'Druckverlust Lüftung',
                'verbose_name_plural': 'Druckverluste Lüftung',
            },
        ),
        migrations.CreateModel(
            name='Gebaeude',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('laenge_ns', models.FloatField(help_text='Länge Nord/Süd in m')),
                ('breite_ow', models.FloatField(help_text='Breite Ost/West in m')),
                ('geschosshoehe', models.FloatField(help_text='Geschosshöhe in m')),
                ('geschosse', models.IntegerField(help_text='Anzahl Geschosse')),
                ('jahres_heizwert', models.FloatField(default=0, help_text='Heizwärmebedarf absolut (kWh/Jahr)')),
                ('tw_kwh_m2', models.FloatField(default=0, help_text='Warmwasserbedarf in kWh/m² (spezifisch)')),
                ('luft_kwh_m2', models.FloatField(default=0, help_text='Lüftungsenergiebedarf in kWh/m² (spezifisch)')),
                ('bel_kwh_m2', models.FloatField(default=0, help_text='Beleuchtungsenergiebedarf in kWh/m² (spezifisch)')),
                ('nutz_kwh_m2', models.FloatField(default=0, help_text='Nutzer/Prozessenergie in kWh/m² (spezifisch)')),
                ('verteilungsverlust_kwh', models.FloatField(default=0, help_text='Verteilungsverluste (kWh/Jahr)')),
                ('speicherverlust_kwh', models.FloatField(default=0, help_text='Speicherverluste (kWh/Jahr)')),
                ('warmwasserbedarf_kwh', models.FloatField(default=0, help_text='Thermischer Warmwasserbedarf (kWh/Jahr)')),
            ],
        ),
        migrations.CreateModel(
            name='KlimaregionTemperatur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region', models.PositiveSmallIntegerField(help_text='Nummer der Klimaregion (z. B. 1 für Bremerhaven, 2 für Rostock, …).', unique=True)),
                ('referenzort', models.CharField(help_text="Name des Referenzortes, z. B. 'Bremerhaven', 'Rostock' usw.", max_length=100)),
                ('jan', models.FloatField(help_text='Mittlere Temperatur im Januar (°C)')),
                ('feb', models.FloatField(help_text='Mittlere Temperatur im Februar (°C)')),
                ('maer', models.FloatField(help_text='Mittlere Temperatur im März (°C)', verbose_name='März')),
                ('apr', models.FloatField(help_text='Mittlere Temperatur im April (°C)')),
                ('mai', models.FloatField(help_text='Mittlere Temperatur im Mai (°C)')),
                ('jun', models.FloatField(help_text='Mittlere Temperatur im Juni (°C)')),
                ('jul', models.FloatField(help_text='Mittlere Temperatur im Juli (°C)')),
                ('aug', models.FloatField(help_text='Mittlere Temperatur im August (°C)')),
                ('sep', models.FloatField(help_text='Mittlere Temperatur im September (°C)')),
                ('okt', models.FloatField(help_text='Mittlere Temperatur im Oktober (°C)')),
                ('nov', models.FloatField(help_text='Mittlere Temperatur im November (°C)')),
                ('dez', models.FloatField(help_text='Mittlere Temperatur im Dezember (°C)')),
                ('jahreswert', models.FloatField(help_text='Jahresmitteltemperatur (°C)')),
            ],
        ),
        migrations.CreateModel(
            name='TrinkwarmwasserKennwert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nutzung', models.CharField(help_text="z. B. 'Bürogebäude', 'Schule mit Duschen' usw.", max_length=100)),
                ('nutzungsbezogen_kwh_pro_einheit_und_tag', models.FloatField(help_text='z. B. 0,4 kWh je Person/Tag oder 6 kWh je Bett/Tag')),
                ('flaechenbezogen_wh_m2_pro_tag', models.FloatField(help_text='z. B. 30 Wh/(m²·d), 500 Wh/(m²·d) etc.')),
                ('bezugsflaeche', models.CharField(help_text="z. B. 'Bürofläche', 'Klassenräume', 'Hotelzimmer' etc.", max_length=100)),
                ('spitzenzapfungen_pro_tag', models.PositiveSmallIntegerField(help_text='Anzahl der Spitzenzapfungen pro Tag (n_SP)')),
            ],
            options={
                'verbose_name': 'Trinkwarmwasser-Richtwert',
                'verbose_name_plural': 'Trinkwarmwasser-Richtwerte',
            },
        ),
        migrations.CreateModel(
            name='AnteiligeSonneneintragskennwerte',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('si_gruppe', models.CharField(choices=[('S1', 'Nachtlüftung und Bauart'), ('S2', 'Grundflächenbezogener Fensterflächenanteil'), ('S3', 'Sonnenschutzglas'), ('S4', 'Fensterneigung'), ('S5', 'Orientierung'), ('S6', 'Einsatz passiver Kühlung')], help_text="Z.B. 'S1', 'S2', ... 'S6'", max_length=2)),
                ('beschreibung', models.CharField(help_text="z. B. 'ohne Nachtlüftung, leichte Bauart' oder 'hoch Nachtlüftung, schwere Bauart' etc.", max_length=100)),
                ('klimaregion', models.CharField(choices=[('A', 'KlimaRegion A'), ('B', 'KlimaRegion B'), ('C', 'KlimaRegion C')], help_text="KlimaRegion: 'A', 'B' oder 'C'", max_length=1)),
                ('typ_gebaeude', models.CharField(choices=[('W', 'Wohngebäude'), ('N', 'Nichtwohngebäude')], help_text="Gebäudetyp: 'W' = Wohngebäude, 'N' = Nichtwohngebäude", max_length=1)),
                ('wert', models.FloatField(help_text='Anteiliges Sonneneintragskennwert S₁ … S₆')),
            ],
            options={
                'verbose_name': 'Anteiliger Sonneneintragskennwert',
                'verbose_name_plural': 'Anteilige Sonneneintragskennwerte',
                'unique_together': {('si_gruppe', 'beschreibung', 'klimaregion', 'typ_gebaeude')},
            },
        ),
        migrations.CreateModel(
            name='SolarStrahlungMonat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_id', models.PositiveSmallIntegerField(help_text='Numerische Kennung der Region (z. B. 11 für Fichtelberg)')),
                ('orientierung', models.CharField(help_text="z. B. 'Horizontal', 'Süd', 'Süd-Ost', 'Ost', 'West' etc.", max_length=20)),
                ('neigung', models.PositiveSmallIntegerField(help_text='Neigungswinkel gegenüber der Horizontalen (z. B. 0, 30, 45, 60, 90)')),
                ('jan', models.FloatField(help_text='Strahlungsintensität Jan (W/m²)')),
                ('feb', models.FloatField(help_text='Strahlungsintensität Feb (W/m²)')),
                ('maer', models.FloatField(help_text='Strahlungsintensität Mär (W/m²)')),
                ('apr', models.FloatField(help_text='Strahlungsintensität Apr (W/m²)')),
                ('mai', models.FloatField(help_text='Strahlungsintensität Mai (W/m²)')),
                ('jun', models.FloatField(help_text='Strahlungsintensität Jun (W/m²)')),
                ('jul', models.FloatField(help_text='Strahlungsintensität Jul (W/m²)')),
                ('aug', models.FloatField(help_text='Strahlungsintensität Aug (W/m²)')),
                ('sep', models.FloatField(help_text='Strahlungsintensität Sep (W/m²)')),
                ('okt', models.FloatField(help_text='Strahlungsintensität Okt (W/m²)')),
                ('nov', models.FloatField(help_text='Strahlungsintensität Nov (W/m²)')),
                ('dez', models.FloatField(help_text='Strahlungsintensität Dez (W/m²)')),
                ('jahreswert', models.FloatField(help_text='Jahresstrahlung in kWh/(m²·a) für die gesamte Orientierung/Neigung')),
            ],
            options={
                'verbose_name': 'Monatliche Solar-Strahlung',
                'verbose_name_plural': 'Monatliche Solar-Strahlungsdaten',
                'unique_together': {('region_id', 'orientierung', 'neigung')},
            },
        ),
        migrations.CreateModel(
            name='SonnenschutzFaktor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zeilennr', models.CharField(help_text="z. B. '3.2.1' (Jalousie 45°), '3.1.2' (Rollladen geschlossen) etc.", max_length=10)),
                ('beschreibung', models.CharField(help_text='Beschreibung der Sonnenschutzvorrichtung', max_length=100)),
                ('fc_g_le0_4_dreifach', models.FloatField(default=1.0, help_text='Fc-Wert für g ≤ 0,4 bei Dreifachverglasung')),
                ('fc_g_le0_4_zweifach', models.FloatField(default=1.0, help_text='Fc-Wert für g ≤ 0,4 bei Zweifachverglasung')),
                ('fc_g_gt0_4_dreifach', models.FloatField(default=1.0, help_text='Fc-Wert für g > 0,4 bei Dreifachverglasung')),
                ('fc_g_gt0_4_zweifach', models.FloatField(default=1.0, help_text='Fc-Wert für g > 0,4 bei Zweifachverglasung')),
            ],
            options={
                'verbose_name': 'Sonnenschutz-Faktor',
                'verbose_name_plural': 'Sonnenschutz-Faktoren',
                'unique_together': {('zeilennr', 'beschreibung')},
            },
        ),
    ]
